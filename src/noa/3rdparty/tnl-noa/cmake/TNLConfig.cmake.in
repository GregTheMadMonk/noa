@PACKAGE_INIT@

set( TNL_PROJECT_NAME "@PROJECT_NAME@" )
set( TNL_PROJECT_VERSION @tnlVersion@ )

# CMake build configuration
set( TNL_BUILD_TYPE "@CMAKE_BUILD_TYPE@" )
set( TNL_EXECUTABLE_SUFFIX "@CMAKE_EXECUTABLE_SUFFIX@" )

# Compiler configuration
set( TNL_C_COMPILER "@CMAKE_C_COMPILER@" )
set( TNL_C_COMPILER_VERSION @CMAKE_C_COMPILER_VERSION@ )
set( TNL_CXX_COMPILER "@CMAKE_CXX_COMPILER@" )
set( TNL_CXX_COMPILER_VERSION @CMAKE_CXX_COMPILER_VERSION@ )
set( TNL_CUDA_COMPILER "@CMAKE_CUDA_COMPILER@" )
set( TNL_CUDA_COMPILER_VERSION @CMAKE_CUDA_COMPILER_VERSION@ )
set( TNL_CUDA_ARCHITECTURES @CMAKE_CUDA_ARCHITECTURES@ )
set( TNL_CUDA_HOST_COMPILER "@CMAKE_CUDA_HOST_COMPILER@" )

set( TNL_C_FLAGS "@CMAKE_C_FLAGS@" )
set( TNL_C_FLAGS_DEBUG "@CMAKE_C_FLAGS_DEBUG@" )
set( TNL_C_FLAGS_RELEASE "@CMAKE_C_FLAGS_RELEASE@" )
set( TNL_C_FLAGS_RELWITHDEBINFO "@CMAKE_C_FLAGS_RELWITHDEBINFO@" )
set( TNL_CXX_FLAGS "@CMAKE_CXX_FLAGS@" )
set( TNL_CXX_FLAGS_DEBUG "@CMAKE_CXX_FLAGS_DEBUG@" )
set( TNL_CXX_FLAGS_RELEASE "@CMAKE_CXX_FLAGS_RELEASE@" )
set( TNL_CXX_FLAGS_RELWITHDEBINFO "@CMAKE_CXX_FLAGS_RELWITHDEBINFO@" )
set( TNL_CUDA_FLAGS "@CMAKE_CUDA_FLAGS@" )
set( TNL_CUDA_FLAGS_DEBUG "@CMAKE_CUDA_FLAGS_DEBUG@" )
set( TNL_CUDA_FLAGS_RELEASE "@CMAKE_CUDA_FLAGS_RELEASE@" )
set( TNL_CUDA_FLAGS_RELWITHDEBINFO "@CMAKE_CUDA_FLAGS_RELWITHDEBINFO@" )

set( TNL_SHARED_LIBRARY_LINK_C_FLAGS "@CMAKE_SHARED_LIBRARY_LINK_C_FLAGS@" )
set( TNL_SHARED_LIBRARY_LINK_C_FLAGS_DEBUG "@CMAKE_SHARED_LIBRARY_LINK_C_FLAGS_DEBUG@" )
set( TNL_SHARED_LIBRARY_LINK_C_FLAGS_RELEASE "@CMAKE_SHARED_LIBRARY_LINK_C_FLAGS_RELEASE@" )
set( TNL_EXE_LINKER_FLAGS "@CMAKE_EXE_LINKER_FLAGS@" )
set( TNL_EXE_LINKER_FLAGS_DEBUG "@CMAKE_EXE_LINKER_FLAGS_DEBUG@" )
set( TNL_EXE_LINKER_FLAGS_RELEASE "@CMAKE_EXE_LINKER_FLAGS_RELEASE@" )
set( TNL_SHARED_LINKER_FLAGS "@CMAKE_SHARED_LINKER_FLAGS@" )
set( TNL_SHARED_LINKER_FLAGS_DEBUG "@CMAKE_SHARED_LINKER_FLAGS_DEBUG@" )
set( TNL_SHARED_LINKER_FLAGS_RELEASE "@CMAKE_SHARED_LINKER_FLAGS_RELEASE@" )

# TNL configuration
set( TNL_INSTALL_HEADERS @TNL_INSTALL_HEADERS@ )
set( TNL_BUILD_OPENMP @TNL_BUILD_OPENMP@ )
set( TNL_BUILD_CUDA @TNL_BUILD_CUDA@ )
set( TNL_BUILD_MPI @TNL_BUILD_MPI@ )

set( TNL_BUILD_BENCHMARKS @TNL_BUILD_BENCHMARKS@ )
set( TNL_BUILD_EXAMPLES @TNL_BUILD_EXAMPLES@ )
set( TNL_BUILD_TOOLS @TNL_BUILD_TOOLS@ )
set( TNL_BUILD_TESTS @TNL_BUILD_TESTS@ )
set( TNL_BUILD_MATRIX_TESTS @TNL_BUILD_MATRIX_TESTS@ )
set( TNL_BUILD_COVERAGE @TNL_BUILD_COVERAGE@ )
set( TNL_BUILD_DOC @TNL_BUILD_DOC@ )

set( TNL_OFFLINE_BUILD @TNL_OFFLINE_BUILD@ )
set( TNL_USE_CI_FLAGS @TNL_USE_CI_FLAGS@ )

# set cmake's include path so that we can include custom modules from
# the TNL installation path
list( APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/Modules" )

# find the std::filesystem library
find_package( Filesystem REQUIRED COMPONENTS Final )

# find the thread library
set( CMAKE_THREAD_PREFER_PTHREAD TRUE )
set( THREADS_PREFER_PTHREAD_FLAG TRUE )
find_package( Threads REQUIRED )

# Check for OpenMP if it is enabled
if( TNL_BUILD_OPENMP )
   find_package( OpenMP COMPONENTS CXX )
endif()

# Check for MPI if it is enabled
if( TNL_BUILD_MPI )
   find_package( MPI COMPONENTS CXX )
endif()

include( ${CMAKE_CURRENT_LIST_DIR}/TNLTargets.cmake )
